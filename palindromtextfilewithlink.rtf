{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Italic;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green196\blue224;\red24\green27\blue36;\red193\green191\blue181;
\red253\green157\blue84;\red254\green200\blue96;\red237\green139\blue97;\red214\green174\blue255;\red134\green226\blue191;
\red205\green255\blue109;}
{\*\expandedcolortbl;;\cssrgb\c72157\c81176\c90196;\cssrgb\c12157\c14118\c18824;\cssrgb\c80000\c79216\c76078;
\cssrgb\c100000\c67843\c40000;\cssrgb\c100000\c81961\c45098;\cssrgb\c94902\c61961\c45490;\cssrgb\c87451\c74902\c100000;\cssrgb\c58431\c90196\c79608;
\cssrgb\c83529\c100000\c50196;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\i\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // Create a function that accepts a string  as a parameter then returns the LONGEST palindrome in that string.  A Palindrome is  a word, phrase, or sequence that reads the same backward as forward, e.g., madam, or nurses run. Punctuation marks can be ignored.
\f1\i0 \cf4 \cb1 \strokec4 \
\

\f0\i \cf2 \cb3 \strokec2 //since js file is not supported in gdrive. Here's the jsfiddle link: https://jsfiddle.net/pLghrwz6/
\f1\i0 \cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 isPalindrome\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  (\cf8 \strokec8 word\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 let\cf4 \strokec4  formatWord \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 word\cf7 \strokec7 .\cf6 \strokec6 match\cf4 \strokec4 (\cf9 \strokec9 /\cf5 \strokec5 \\b\cf9 \strokec9 (\\w\cf7 \strokec7 +\cf9 \strokec9 )\cf5 \strokec5 \\b\cf9 \strokec9 /\cf5 \strokec5 g\cf4 \strokec4 );\cb1 \
\cb3   formatWord \cf7 \strokec7 =\cf4 \strokec4  formatWord\cf7 \strokec7 .\cf6 \strokec6 join\cf4 \strokec4 (\cf10 \strokec10 ""\cf4 \strokec4 )\cf7 \strokec7 .\cf6 \strokec6 toLowerCase\cf4 \strokec4 ();\cb1 \
\
\cb3   \cf5 \strokec5 const\cf4 \strokec4  reverse \cf7 \strokec7 =\cf4 \strokec4  formatWord\cf7 \strokec7 .\cf6 \strokec6 split\cf4 \strokec4 (\cf10 \strokec10 ""\cf4 \strokec4 )\cf7 \strokec7 .\cf6 \strokec6 reverse\cf4 \strokec4 ()\cf7 \strokec7 .\cf6 \strokec6 join\cf4 \strokec4 (\cf10 \strokec10 ""\cf4 \strokec4 )\cf7 \strokec7 .\cf6 \strokec6 toLowerCase\cf4 \strokec4 ();\cb1 \
\
\cb3   \cf5 \strokec5 return\cf4 \strokec4  formatWord \cf7 \strokec7 ===\cf4 \strokec4  reverse;\cb1 \
\cb3 \};\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 getLongestPalindrome\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  (\cf8 \strokec8 sentence\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 let\cf4 \strokec4  formatSentence \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 sentence\cf7 \strokec7 .\cf6 \strokec6 match\cf4 \strokec4 (\cf9 \strokec9 /\cf5 \strokec5 \\b\cf9 \strokec9 (\\w\cf7 \strokec7 +\cf9 \strokec9 )\cf5 \strokec5 \\b\cf9 \strokec9 /\cf5 \strokec5 g\cf4 \strokec4 );\cb1 \
\cb3   console\cf7 \strokec7 .\cf6 \strokec6 log\cf4 \strokec4 (\{ formatSentence \});\cb1 \
\cb3   \cf5 \strokec5 let\cf4 \strokec4  sentenceLength \cf7 \strokec7 =\cf4 \strokec4  formatSentence\cf7 \strokec7 .\cf4 \strokec4 length;\cb1 \
\
\cb3   \cf5 \strokec5 let\cf4 \strokec4  palindromes \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3   \cf5 \strokec5 let\cf4 \strokec4  palindromeLengths \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\
\cb3   
\f0\i \cf2 \strokec2 //check whole sentence
\f1\i0 \cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (\cf6 \strokec6 isPalindrome\cf4 \strokec4 (\cf8 \strokec8 sentence\cf4 \strokec4 )) \{\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \cf8 \strokec8 sentence\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   
\f0\i \cf2 \strokec2 //check per word
\f1\i0 \cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  i \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 0\cf4 \strokec4 ; i \cf7 \strokec7 <\cf4 \strokec4  sentenceLength; i\cf7 \strokec7 ++\cf4 \strokec4 ) \{\cb1 \
\cb3     
\f0\i \cf2 \strokec2 //check every word
\f1\i0 \cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf6 \strokec6 isPalindrome\cf4 \strokec4 (formatSentence[i])) \{\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (formatSentence[i]\cf7 \strokec7 .\cf4 \strokec4 length \cf7 \strokec7 >\cf4 \strokec4  \cf8 \strokec8 1\cf4 \strokec4 ) \{\cb1 \
\cb3         palindromes\cf7 \strokec7 .\cf6 \strokec6 push\cf4 \strokec4 (\{\cb1 \
\cb3           word: formatSentence[i],\cb1 \
\cb3           indexFrom: i,\cb1 \
\cb3           indexTo: \cf8 \strokec8 null\cf4 \strokec4 ,\cb1 \
\cb3         \});\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\
\cb3     
\f0\i \cf2 \strokec2 //check every word but with greater scope
\f1\i0 \cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  j \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 0\cf4 \strokec4 ; j \cf7 \strokec7 <\cf4 \strokec4  sentenceLength; j\cf7 \strokec7 ++\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (j \cf7 \strokec7 >\cf4 \strokec4  i) \{\cb1 \
\cb3         \cf5 \strokec5 let\cf4 \strokec4  scopedSentence \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3         \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  k \cf7 \strokec7 =\cf4 \strokec4  i; k \cf7 \strokec7 <=\cf4 \strokec4  j; k\cf7 \strokec7 ++\cf4 \strokec4 ) \{\cb1 \
\cb3           scopedSentence\cf7 \strokec7 .\cf6 \strokec6 push\cf4 \strokec4 (formatSentence[k]);\cb1 \
\cb3         \}\cb1 \
\cb3         \cf5 \strokec5 let\cf4 \strokec4  newScopedSentence \cf7 \strokec7 =\cf4 \strokec4  scopedSentence\cf7 \strokec7 .\cf6 \strokec6 join\cf4 \strokec4 (\cf10 \strokec10 " "\cf4 \strokec4 );\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (\cf6 \strokec6 isPalindrome\cf4 \strokec4 (newScopedSentence)) \{\cb1 \
\cb3           palindromes\cf7 \strokec7 .\cf6 \strokec6 push\cf4 \strokec4 (\{\cb1 \
\cb3             word: newScopedSentence,\cb1 \
\cb3             indexFrom: i,\cb1 \
\cb3             indexTo: j,\cb1 \
\cb3           \});\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  i \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 0\cf4 \strokec4 ; i \cf7 \strokec7 <\cf4 \strokec4  palindromes\cf7 \strokec7 .\cf4 \strokec4 length; i\cf7 \strokec7 ++\cf4 \strokec4 ) \{\cb1 \
\cb3     palindromeLengths\cf7 \strokec7 .\cf6 \strokec6 push\cf4 \strokec4 (palindromes[i]\cf7 \strokec7 .\cf4 \strokec4 word\cf7 \strokec7 .\cf4 \strokec4 length);\cb1 \
\cb3   \}\cb1 \
\
\cb3   
\f0\i \cf2 \strokec2 //get highest number
\f1\i0 \cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  max \cf7 \strokec7 =\cf4 \strokec4  Math\cf7 \strokec7 .\cf6 \strokec6 max\cf4 \strokec4 (\cf7 \strokec7 ...\cf4 \strokec4 palindromeLengths);\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  index \cf7 \strokec7 =\cf4 \strokec4  palindromeLengths\cf7 \strokec7 .\cf6 \strokec6 indexOf\cf4 \strokec4 (max);\cb1 \
\
\cb3   
\f0\i \cf2 \strokec2 //return longest word
\f1\i0 \cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 return\cf4 \strokec4  palindromes[index]\cf7 \strokec7 .\cf4 \strokec4 word;\cb1 \
\cb3 \};\cb1 \
\
\cb3 console\cf7 \strokec7 .\cf6 \strokec6 log\cf4 \strokec4 (\{\cb1 \
\cb3   LongestPalindrome: \cf6 \strokec6 getLongestPalindrome\cf4 \strokec4 (\cb1 \
\cb3     \cf10 \strokec10 "Hello will you please rise to vote, sir George"\cf4 \cb1 \strokec4 \
\cb3   ),\cb1 \
\cb3 \});\cb1 \
\
}